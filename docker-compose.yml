x-env-file: &envfile
  env_file:
    - .env

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: ./api.dockerfile
    <<: *envfile
    ports:
      - "8010:8000"
    environment:
      # Use docker-network defaults; override via .env if you want
      DATABASE_URL: ${DATABASE_URL_DOCKER:-postgresql://postgres:password@postgres:5432/against_wind}
      REDIS_URL: ${REDIS_URL_DOCKER:-redis://redis:6379}
      S3_ENDPOINT: ${S3_ENDPOINT_DOCKER}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY}
      S3_SECRET_KEY: ${S3_SECRET_KEY}
      S3_BUCKET: ${S3_BUCKET:-gpx-files}

      # App config (pulled from .env with sensible defaults)
      SECRET_KEY: ${SECRET_KEY:-change-me}
      ALGORITHM: ${ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      OPEN_METEO_BASE_URL: ${OPEN_METEO_BASE_URL:-https://api.open-meteo.com/v1}
      MET_OFFICE_API_KEY: ${MET_OFFICE_API_KEY:-}
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY:-}
      DEBUG: ${DEBUG:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: ${CORS_ORIGINS:-'["http://localhost:3000","http://localhost:3001"]'}
      DEFAULT_SAMPLE_DISTANCE_KM: ${DEFAULT_SAMPLE_DISTANCE_KM:-1.0}
      DEFAULT_TIME_RESOLUTION_MINUTES: ${DEFAULT_TIME_RESOLUTION_MINUTES:-15}
      DEFAULT_RIDER_HEIGHT_M: ${DEFAULT_RIDER_HEIGHT_M:-1.5}
      MAX_ROUTE_LENGTH_KM: ${MAX_ROUTE_LENGTH_KM:-500.0}
      MAX_CONCURRENT_FORECASTS: ${MAX_CONCURRENT_FORECASTS:-10}
      FORECAST_TIMEOUT_SECONDS: ${FORECAST_TIMEOUT_SECONDS:-30}
      CACHE_TTL_SECONDS: ${CACHE_TTL_SECONDS:-7200}
    depends_on:
      - postgres
      - redis
      - minio
    command: uv run uvicorn api.app.main:app --host 0.0.0.0 --port 8000
    restart: unless-stopped

  # Frontend UI
#  ui:
#    build:
#      context: .
#      dockerfile: ./ui.dockerfile
#    <<: *envfile
#    ports:
#      - "3100:3000"
#    environment:
#      # Browser hits host; default to API on host port
#      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
#      NEXT_PUBLIC_MAPBOX_TOKEN: ${NEXT_PUBLIC_MAPBOX_TOKEN:-}
#    volumes:
#      - ./ui:/app
#      - /app/node_modules
#      - /app/.next
#    command: pnpm dev
#    depends_on:
#      - api
#    restart: unless-stopped

  # Background worker
  worker:
    build:
      context: .
      dockerfile: ./api.dockerfile
    <<: *envfile
    environment:
      DATABASE_URL: ${DATABASE_URL_DOCKER:-postgresql://postgres:password@postgres:5432/against_wind}
      REDIS_URL: ${REDIS_URL_DOCKER:-redis://redis:6379}
      S3_ENDPOINT: ${S3_ENDPOINT_DOCKER}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-minioadmin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-gpx-files}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: uv run python -m api.app.worker.worker
    restart: unless-stopped

  # Database
  postgres:
    image: postgres:15
    <<: *envfile
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-against_wind}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-against_wind}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching and job queue
  redis:
    image: redis:7-alpine
    <<: *envfile
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    <<: *envfile
    ports:
      - "9010:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:
